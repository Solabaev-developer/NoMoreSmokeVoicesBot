from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db import get_db
from .keyboards import main_menu

router = Router()


class NewSticker(StatesGroup):
    waiting_for_voice = State()
    waiting_for_name = State()
    waiting_for_speaker = State()
    waiting_for_tags = State()


@router.message(F.text.in_(["/newvoice", "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"]))
async def cmd_newsticker(msg: Message, state: FSMContext):
    await state.clear()
    await state.set_state(NewSticker.waiting_for_voice)
    await msg.answer("üìù –®–∞–≥ 1/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞.")


@router.message(NewSticker.waiting_for_voice, F.voice)
async def process_newsticker_voice(msg: Message, state: FSMContext):
    row = await get_db().fetchrow(
        "INSERT INTO voices(user_id, file_id, tags) VALUES ($1, $2, $3) RETURNING id",
        msg.from_user.id, msg.voice.file_id, []
    )
    sid = row["id"]
    await state.update_data(sticker_id=sid)
    await msg.answer(
        f"‚úÖ –®–∞–≥ 1/4 –∑–∞–≤–µ—Ä—à—ë–Ω. ID –≤–∞—à–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞: {sid}\n"
        "üìù –®–∞–≥ 2/4: –≤–≤–µ–¥–∏—Ç–µ *–∏–º—è* –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(NewSticker.waiting_for_name)


@router.message(NewSticker.waiting_for_name)
async def process_newsticker_name(msg: Message, state: FSMContext):
    name = msg.text.strip()
    if not name:
        return await msg.answer("‚ùóÔ∏è–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–º—è.")
    data = await state.get_data()
    sid = data["sticker_id"]
    await get_db().execute(
        "UPDATE voices SET name = $1 WHERE id = $2",
        name, sid
    )
    await state.update_data(name=name)
    await msg.answer(
        f"‚úÖ –®–∞–≥ 2/4 –∑–∞–≤–µ—Ä—à—ë–Ω. –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{name}*\n"
        "üó£ –®–∞–≥ 3/4: –ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –≤ —ç—Ç–æ–º —Å—Ç–∏–∫–µ—Ä–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–º–∞, –Ø, –î—Ä—É–≥)",
        parse_mode="Markdown"
    )
    await state.set_state(NewSticker.waiting_for_speaker)


@router.message(NewSticker.waiting_for_speaker)
async def process_newsticker_speaker(msg: Message, state: FSMContext):
    speaker = msg.text.strip()
    if not speaker:
        return await msg.answer("‚ùóÔ∏è–ò–º—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
    data = await state.get_data()
    sid = data["sticker_id"]
    await get_db().execute(
        "UPDATE voices SET speaker = $1 WHERE id = $2",
        speaker, sid
    )
    await state.update_data(speaker=speaker)
    await msg.answer(
        f"‚úÖ –®–∞–≥ 3/4 –∑–∞–≤–µ—Ä—à—ë–Ω. –ì–æ–≤–æ—Ä–∏—Ç: *{speaker}*\n"
        "üè∑ –®–∞–≥ 4/4: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ø—Ä–∏–≤–µ—Ç,—Ç–µ—Å—Ç`).",
        parse_mode="Markdown"
    )
    await state.set_state(NewSticker.waiting_for_tags)


@router.message(NewSticker.waiting_for_tags)
async def process_newsticker_tags(msg: Message, state: FSMContext):
    tags = [t.strip().lower() for t in msg.text.split(",") if t.strip()]
    if not tags:
        return await msg.answer("‚ùóÔ∏è–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    data = await state.get_data()
    sid = data["sticker_id"]
    name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    speaker = data.get("speaker", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await get_db().execute(
        "UPDATE voices SET tags = $1 WHERE id = $2",
        tags, sid
    )

    await msg.answer(
        f"üéâ –°—Ç–∏–∫–µ—Ä *{name}* (ID `{sid}`) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
        f"üó£ –ì–æ–≤–æ—Ä–∏—Ç: {speaker}\n"
        f"üè∑ –¢–µ–≥–∏: `{', '.join(tags)}`",
        parse_mode="Markdown",
        reply_markup=main_menu
    )
    await state.clear()