from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db import get_db

router = Router()

class SearchState(StatesGroup):
    waiting_for_tag = State()

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º")
async def start_tag_search(msg: Message, state: FSMContext):
    await state.set_state(SearchState.waiting_for_tag)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∑–∞–ø—è—Ç–æ–π):")

@router.message(SearchState.waiting_for_tag)
async def perform_tag_search(msg: Message, state: FSMContext):
    tag = msg.text.strip().lower()
    if not tag:
        return await msg.answer("‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–≥.")

    rows = await get_db().fetch(
        "SELECT id, name FROM voices WHERE $1 = ANY(tags)",
        tag
    )

    if not rows:
        await msg.answer(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–≥—É: `{tag}`", parse_mode="Markdown")
    else:
        result = "\n".join(
            f"üîπ *{r['name']}* (ID `{r['id']}`)" if r['name'] else f"ID `{r['id']}`"
            for r in rows
        )
        await msg.answer(
            f"–ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Ç–µ–≥—É `{tag}`:\n\n{result}",
            parse_mode="Markdown"
        )

    await state.clear()